import { useEffect, useRef, useState } from "react";

import styles from "../ChatPage.module.css";
import { useFileUpload } from "../hooks/useFileUpload";

export default function MessageInput({ onSendMessage, disabled = false }) {
  const [message, setMessage] = useState("");
  const [showStickers, setShowStickers] = useState(false);
  const stickerMenuRef = useRef(null);

  // –ù–∞–±–æ—Ä —Å—Ç–∏–∫–µ—Ä–æ–≤
  const stickers = [
    "üòÄ",
    "üòÉ",
    "üòÑ",
    "üòÅ",
    "üòÜ",
    "üòÖ",
    "üòÇ",
    "ü§£",
    "üòä",
    "üòá",
    "üôÇ",
    "üôÉ",
    "üòâ",
    "üòå",
    "üòç",
    "ü•∞",
    "üòò",
    "üòó",
    "üòô",
    "üòö",
    "üòã",
    "üòõ",
    "üòù",
    "üòú",
    "ü§™",
    "ü§®",
    "üßê",
    "ü§ì",
    "üòé",
    "ü§©",
    "ü•≥",
    "üòè",
    "üòí",
    "üòû",
    "üòî",
    "üòü",
    "üòï",
    "üôÅ",
    "‚òπÔ∏è",
    "üò£",
    "üòñ",
    "üò´",
    "üò©",
    "ü•∫",
    "üò¢",
    "üò≠",
    "üò§",
    "üò†",
    "üò°",
    "ü§¨",
    "ü§Ø",
    "üò≥",
    "ü•µ",
    "ü•∂",
    "üò±",
    "üò®",
    "üò∞",
    "üò•",
    "üòì",
    "ü§ó",
    "ü§î",
    "ü§≠",
    "ü§´",
    "ü§•",
    "üò∂",
    "üòê",
    "üòë",
    "üò¨",
    "üôÑ",
    "üòØ",
    "üò¶",
    "üòß",
    "üòÆ",
    "üò≤",
    "ü•±",
    "üò¥",
    "ü§§",
    "üò™",
    "üòµ",
    "ü§ê",
    "ü•¥",
    "ü§¢",
    "ü§Æ",
    "ü§ß",
    "üò∑",
    "ü§í",
    "ü§ï",
    "ü§ë",
    "ü§†",
    "üòà",
    "üëø",
    "üëπ",
    "üë∫",
    "ü§°",
    "üí©",
    "üëª",
    "üíÄ",
    "‚ò†Ô∏è",
    "üëΩ",
    "üëæ",
    "ü§ñ",
    "üéÉ",
    "üò∫",
    "üò∏",
    "üòπ",
    "üòª",
    "üòº",
    "üòΩ",
    "üôÄ",
    "üòø",
    "üòæ",
    "üëã",
    "ü§ö",
    "üñêÔ∏è",
    "‚úã",
    "üññ",
    "üëå",
    "ü§è",
    "‚úåÔ∏è",
    "ü§û",
    "ü§ü",
    "ü§ò",
    "ü§ô",
    "üëà",
    "üëâ",
    "üëÜ",
    "üñï",
    "üëá",
    "‚òùÔ∏è",
    "üëç",
    "üëé",
    "üëä",
    "‚úä",
    "ü§õ",
    "ü§ú",
    "üëè",
    "üôå",
    "üëê",
    "ü§≤",
    "ü§ù",
    "üôè",
    "‚úçÔ∏è",
    "üíÖ",
    "ü§≥",
    "üí™",
    "ü¶æ",
    "ü¶ø",
    "ü¶µ",
    "ü¶∂",
    "üëÇ",
    "ü¶ª",
    "üëÉ",
    "üß†",
    "ü´Ä",
    "ü´Å",
    "ü¶∑",
    "ü¶¥",
    "üëÄ",
    "üëÅÔ∏è",
    "üëÖ",
    "üëÑ",
    "üíã",
    "ü©∏",
    "üë∂",
    "üßí",
    "üë¶",
    "üëß",
    "üßë",
  ];

  const { uploading, fileInputRef, openFileDialog, handleFileChange } =
    useFileUpload(onSendMessage);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é —Å—Ç–∏–∫–µ—Ä–æ–≤ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        stickerMenuRef.current &&
        !stickerMenuRef.current.contains(event.target)
      ) {
        setShowStickers(false);
      }
    };

    if (showStickers) {
      document.addEventListener("mousedown", handleClickOutside);
    }

    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [showStickers]);

  const handleStickerClick = (sticker) => {
    setMessage((prevMessage) => prevMessage + sticker);
    setShowStickers(false);
  };

  const handleEmojiClick = () => {
    if (!disabled) {
      setShowStickers(!showStickers);
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (message.trim() && !disabled) {
      onSendMessage(message.trim());
      setMessage("");
    }
  };

  const handleFileClick = () => {
    if (!disabled) {
      openFileDialog();
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSubmit(e);
    }
  };

  return (
    <div className={styles.inputField}>
      <input
        ref={fileInputRef}
        type="file"
        accept=".jpg,.jpeg,.png,.pdf"
        onChange={handleFileChange}
        style={{ display: "none" }}
      />
      <img
        src="/icons/chat/folder.svg"
        alt="folder"
        className={styles.icon}
        style={{
          opacity: disabled || uploading ? 0.3 : 0.7,
          cursor: disabled || uploading ? "not-allowed" : "pointer",
        }}
        onClick={handleFileClick}
      />
      <form onSubmit={handleSubmit} style={{ flex: 1, display: "flex" }}>
        <input
          type="text"
          placeholder={
            uploading
              ? "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞..."
              : disabled
                ? "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è..."
                : "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
          }
          value={message}
          onChange={(e) => setMessage(e.target.value)}
          onKeyPress={handleKeyPress}
          disabled={disabled || uploading}
          className={disabled ? styles.disabledInput : ""}
        />
      </form>
      <img
        src="/icons/chat/emoji.svg"
        alt="emoji"
        className={styles.icon}
        style={{
          opacity: disabled ? 0.3 : 0.7,
          cursor: disabled ? "not-allowed" : "pointer",
        }}
        onClick={handleEmojiClick}
      />
      <img
        src="/icons/chat/send.svg"
        alt="send"
        className={styles.icon}
        style={{
          opacity: disabled ? 0.3 : 0.7,
          cursor: disabled ? "not-allowed" : "pointer",
        }}
        onClick={handleSubmit}
      />
      <img
        src="/icons/chat/microphone.svg"
        alt="microphone"
        className={styles.icon}
        style={{ opacity: disabled ? 0.3 : 0.7 }}
      />

      {/* –ú–µ–Ω—é —Å—Ç–∏–∫–µ—Ä–æ–≤ */}
      {showStickers && (
        <div
          ref={stickerMenuRef}
          style={{
            position: "absolute",
            bottom: "60px",
            right: "10px",
            backgroundColor: "white",
            border: "1px solid #e0e0e0",
            borderRadius: "12px",
            padding: "16px",
            maxWidth: "320px",
            maxHeight: "200px",
            overflowY: "auto",
            boxShadow: "0 4px 12px rgba(0, 0, 0, 0.15)",
            zIndex: 1000,
            display: "grid",
            gridTemplateColumns: "repeat(8, 1fr)",
            gap: "8px",
          }}
        >
          {stickers.map((sticker, index) => (
            <button
              key={index}
              onClick={() => handleStickerClick(sticker)}
              style={{
                background: "none",
                border: "none",
                fontSize: "20px",
                cursor: "pointer",
                padding: "4px",
                borderRadius: "6px",
                transition: "background-color 0.2s",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                width: "32px",
                height: "32px",
              }}
              onMouseEnter={(e) => {
                e.target.style.backgroundColor = "#f5f5f5";
              }}
              onMouseLeave={(e) => {
                e.target.style.backgroundColor = "transparent";
              }}
            >
              {sticker}
            </button>
          ))}
        </div>
      )}
    </div>
  );
}
